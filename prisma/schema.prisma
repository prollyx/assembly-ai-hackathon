// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

enum Rating {
  GOOD
  BAD
  NOT_RATED
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  firstname  String
  lastname   String
  email      String      @unique
  created_at DateTime    @default(now())
  // organization   Organization? @relation(fields: [organizationId], references: [id])
  // organizationId String?    @db.ObjectId
  responses  Responses[]
  projects   Project[]
}

model Responses {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  prompt    String
  response  String
  rated     Rating?
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  Feature   Feature? @relation(fields: [featureId], references: [id])
  featureId String?  @db.ObjectId
}

// model Organization {
//   id          String @id @default(auto()) @map("_id") @db.ObjectId
//   name        String
//   description String
//   seats       Int
//   users       User[]
// }

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  features    Feature[]
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?   @db.ObjectId
}

model Feature {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  description         String
  requirements        String?
  user_stories        String?
  test_cases          String?
  acceptance_criteria String?
  project             Project?    @relation(fields: [projectId], references: [id])
  projectId           String     @db.ObjectId
  responses           Responses[]
}
